# board used: https://www.instructables.com/UNO-R3-WIFI-ESP8266-CH340G-Arduino-and-WIFI-a-Vers/
esphome:
  name: in17-nixie-clock
  friendly_name: "IN-17 Nixie Clock"

esp8266:
  board: esp01_1m

logger:
  baud_rate: 0 # turn off logging over uart

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600
  debug:
    direction: BOTH
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

sensor:
  - platform: homeassistant
    name: "ETH Price"
    id: ethprice
    entity_id: sensor.eth_price
  - platform: homeassistant
    name: "Temperature"
    id: temperature
    entity_id: sensor.machine_room_sensor_air_temperature
  - platform: homeassistant
    name: "Humidity"
    id: humidity
    entity_id: sensor.machine_room_sensor_humidity

button:
  - platform: template
    name: "Clean Cathodes"
    icon: "mdi:monitor-shimmer"
    on_press:
      - uart.write: 'C'
  - platform: template
    name: "Sync Time"
    id: synctime
    icon: "mdi:clock-edit-outline"
    on_press:
      - uart.write: !lambda >
          esphome::ESPTime now = id(sntp_time).now();
          ESP_LOGI("main", "updating ATMega time");

          char str[8];
          now.strftime(str, sizeof(str), "T%H%M%S");
          std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
          return vec;
  - platform: template
    name: "Show Sensor Data"
    id: showsensordata
    icon: "mdi:home-thermometer-outline"
    on_press:
      - uart.write: !lambda >
          float tempValue = id(temperature).state;
          float humidityValue = id(humidity).state;
          ESP_LOGI("main", "temperature: %f, humidity: %f", tempValue, humidityValue);
          if (isnan(tempValue)) tempValue = 0;
          if (isnan(humidityValue)) humidityValue = 0;

          char str[8];
          snprintf(str, sizeof(str), "M%02.0f__%02.0f", tempValue, humidityValue);
          std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
          return vec;
  - platform: template
    name: "Show ETH Price"
    id: showethprice
    icon: "mdi:ethereum"
    on_press:
      - uart.write: !lambda >
          float value = id(ethprice).state;
          ESP_LOGI("main", "eth price: %f", value);
          if (isnan(value)) value = 0;

          char str[8];
          snprintf(str, sizeof(str), "M%06d", int(value));
          for (int i = 1; str[i] == '0' && i < 6; i++) str[i] = '_';     
          std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
          return vec;

switch:
  - platform: template
    name: "Display"
    icon: "mdi:lightbulb-on-outline"
    restore_mode: ALWAYS_ON 
    optimistic: True
    assumed_state: True
    turn_on_action:
      - uart.write: '1'
    turn_off_action:
      - uart.write: '0'

time:
  - platform: sntp
    id: sntp_time
    on_time:
      - hours: '*'
        minutes: 0
        seconds: 0
        then:
          - button.press: synctime
      - seconds: 3,23,43
        then:
          - button.press: showethprice
      - seconds: 13,33,53
        then:
          - button.press: showsensordata