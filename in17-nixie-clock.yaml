# board used: https://www.instructables.com/UNO-R3-WIFI-ESP8266-CH340G-Arduino-and-WIFI-a-Vers/
esphome:
  name: "in17-nixie-clock"
  friendly_name: IN-17 Nixie Clock

esp8266:
  board: esp01_1m

logger:
  baud_rate: 0 # turn off logging over uart

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600
  debug:
    direction: BOTH
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

sensor:
  - platform: homeassistant
    name: "Temperature"
    id: temperature
    entity_id: sensor.machine_room_sensor_air_temperature
  - platform: homeassistant
    name: "Humidity"
    id: humidity
    entity_id: sensor.machine_room_sensor_humidity

button:
  - platform: template
    name: "Sync Time"
    icon: "mdi:clock-edit-outline"
    on_press:
      - uart.write: !lambda >
          char str[8];
          esphome::ESPTime now = id(sntp_time).now();
          now.strftime(str, sizeof(str), "T%H%M%S");
          ESP_LOGI("main", "updating ATMega time");
          std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
          return vec;

switch:
  - platform: template
    name: "Display"
    icon: "mdi:lightbulb-on"
    turn_on_action:
      - uart.write: '1'
    turn_off_action:
      - uart.write: '0'
  # - platform: uart
  #   name: "Display"
  #   icon: "mdi:lightbulb-on"
  #   data:
  #     turn_on: '1'
  #     turn_off: '0'

time:
  - platform: sntp
    id: sntp_time
    on_time:
      - hours: '*'
        minutes: 0
        seconds: 0
        then:
          - uart.write: !lambda >
              char str[8];
              esphome::ESPTime now = id(sntp_time).now();
              now.strftime(str, sizeof(str), "T%H%M%S");
              ESP_LOGI("main", "updating ATMega time");
              std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
              return vec;
      - seconds: 13,33,53
        then:
          - uart.write: !lambda >
              char str[8];
              ESP_LOGI("main", "temperature: %f", id(temperature).state);
              ESP_LOGI("main", "humidity: %f", id(humidity).state);
              snprintf(str, sizeof(str), "M%02.0f__%02.0f", id(temperature).state, id(humidity).state);
              std::vector<unsigned char> vec(str, str + sizeof(str) - 1);
              return vec;
